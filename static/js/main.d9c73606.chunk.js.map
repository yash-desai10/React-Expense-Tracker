{"version":3,"sources":["components/Header.js","context/Actions.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/AddTranscationHeader.js","components/AddTransaction.js","components/TransactionHistory.js","components/IncomeHistoryHeader.js","components/IncomeHistory.js","components/ExpenseHistoryHeader.js","components/ExpenseHistory.js","components/IncomeExpense.js","App.js","reportWebVitals.js","index.js"],"names":["Header","ACTIONS","state","action","type","incomeTransactions","filter","incomeTransaction","id","payload","expenseTransactions","expenseTransaction","initialTransactionState","JSON","parse","localStorage","getItem","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","useEffect","setItem","stringify","Provider","value","deleteTransaction","addIncome","addExpense","Balance","useContext","totalIncome","map","incomeAmount","reduce","accumulator","item","toFixed","totalExpense","expenseAmount","className","AddTranscationHeader","AddTransaction","useState","incomeDescription","setIncomeDescription","setIncomeAmount","expenseDescription","setExpenseDescription","setExpenseAmount","onSubmit","event","preventDefault","newIncomeTransaction","Math","floor","random","htmlFor","onChange","target","placeholder","newExpenseTransaction","TransactionHistory","isIncomeState","abs","onClick","IncomeHistoryHeader","IncomeHistory","ExpenseHistoryHeader","ExpenseHistory","IncomeExpense","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9c73606.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <h2>Expense Tracker</h2>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","export const ACTIONS= {\r\n    ADD_INCOME:\"ADD_INCOME\",\r\n    DELETE_TRANSACTION:\"DELETE_TRANSACTION\",\r\n    ADD_EXPENSE:\"ADD_EXPENSE\"\r\n}\r\n","import { ACTIONS } from \"./Actions\";\r\n\r\n// Maintains state change on specific event\r\nexport default (state,action) => {\r\n    switch(action.type)\r\n    {\r\n        case ACTIONS.DELETE_TRANSACTION:\r\n            return {\r\n                ...state,\r\n                incomeTransactions: state.incomeTransactions.filter(incomeTransaction => incomeTransaction.id !== action.payload),\r\n                expenseTransactions: state.expenseTransactions.filter(expenseTransaction => expenseTransaction.id !== action.payload)\r\n            }\r\n        case ACTIONS.ADD_INCOME:\r\n            return{\r\n                ...state,\r\n                incomeTransactions:[action.payload,...state.incomeTransactions]\r\n            }\r\n        case ACTIONS.ADD_EXPENSE:\r\n            return {\r\n                ...state,\r\n                expenseTransactions:[action.payload,...state.expenseTransactions]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React,{createContext,useReducer,useEffect} from 'react';\r\nimport { ACTIONS } from './Actions';\r\nimport AppReducer from './AppReducer';\r\n\r\n// Initial State\r\nconst initialTransactionState = {\r\n\r\n    // if there are no values stored in local storage, \r\n    // it will return an empty array else it will return the stored values\r\n     incomeTransactions : JSON.parse(localStorage.getItem(\"incomeTransaction\")) || [],\r\n     expenseTransactions : JSON.parse(localStorage.getItem(\"expenseTransaction\")) || []\r\n}\r\n\r\n// Context\r\nexport const GlobalContext=createContext(initialTransactionState);\r\n\r\n// Provider Component\r\nexport const GlobalProvider = ({children}) => {\r\n\r\n    // Reducer\r\n    const [state,dispatch]=useReducer(AppReducer,initialTransactionState); \r\n\r\n    // Storing transaction values in local storage using \"useEffect\" hook\r\n    useEffect(() => {\r\n        localStorage.setItem(\"incomeTransaction\",JSON.stringify(state.incomeTransactions));\r\n        localStorage.setItem(\"expenseTransaction\",JSON.stringify(state.expenseTransactions));\r\n    })\r\n\r\n    // Delete Transaction Action\r\n    function deleteTransaction (id) {\r\n        dispatch({\r\n            type: ACTIONS.DELETE_TRANSACTION,\r\n            payload: id\r\n        });\r\n    }\r\n\r\n    // Add Income Action\r\n    function addIncome (incomeTransaction) {\r\n        dispatch({\r\n            type: ACTIONS.ADD_INCOME,\r\n            payload: incomeTransaction\r\n        });\r\n    }\r\n    \r\n\r\n    // Add Expense Action\r\n    function addExpense (expenseTransaction) {\r\n        dispatch({\r\n            type: ACTIONS.ADD_EXPENSE,\r\n            payload: expenseTransaction\r\n        })\r\n    }\r\n\r\n    // Providing state to child components\r\n    return (<GlobalContext.Provider value={{\r\n        incomeTransactions: state.incomeTransactions,\r\n        expenseTransactions: state.expenseTransactions,\r\n        deleteTransaction,\r\n        addIncome,\r\n        addExpense\r\n        }}>\r\n        {children}\r\n    </GlobalContext.Provider>)\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\n\r\nconst Balance = () => {\r\n    const {incomeTransactions,expenseTransactions}=useContext(GlobalContext);\r\n\r\n    // fetching all amount values of each transaction\r\n    const incomeAmounts=incomeTransactions.map(incomeTransaction => incomeTransaction.incomeAmount);\r\n    const totalIncome=incomeAmounts.reduce((accumulator,item) => (accumulator+=item),0).toFixed(2);\r\n\r\n    const expenseAmounts=expenseTransactions.map(expenseTransaction => expenseTransaction.expenseAmount);\r\n    const totalExpense=expenseAmounts.reduce((accumulator,item) => (accumulator+=item),0).toFixed(2);\r\n\r\n    \r\n    return (\r\n        <div className=\"balance\">Balance : ${(totalIncome-totalExpense).toFixed(2)}</div>\r\n    )\r\n}\r\n\r\nexport default Balance\r\n","import React from 'react'\r\n\r\nconst AddTranscationHeader = () => {\r\n    return (\r\n        <div>\r\n            <h3>Add Transcation</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddTranscationHeader\r\n","import React, {useState,useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\nimport AddTranscationHeader from './AddTranscationHeader';\r\n\r\nconst AddTransaction = () => {\r\n\r\n    const [incomeDescription,setIncomeDescription]=useState(\"\"); // Current state for income description\r\n    const [incomeAmount,setIncomeAmount]=useState(\"\"); // Current state for income amount\r\n\r\n    const [expenseDescription,setExpenseDescription]=useState(\"\"); // Current state for income description\r\n    const [expenseAmount,setExpenseAmount]=useState(\"\"); // Current state for income amount\r\n\r\n    const {addIncome,addExpense}=useContext(GlobalContext); // Importing Global State\r\n\r\n\r\n    const onSubmitIncome = (event) => {\r\n        event.preventDefault(); // Prevent browser from REFRESH / RELOAD\r\n\r\n        const newIncomeTransaction= {\r\n            id: Math.floor(Math.random() * 1000),\r\n            incomeDescription,\r\n            incomeAmount: incomeAmount * 1 // Multiply String with \"1\" to convert into number\r\n        }  \r\n    addIncome(newIncomeTransaction);\r\n    \r\n    setIncomeAmount(\"\"); // Clear input field\r\n    setIncomeDescription(\"\"); // Clear input field\r\n    }\r\n\r\n    const onSubmitExpense = (event) => {\r\n        event.preventDefault(); // Prevent browser from REFRESH / RELOAD\r\n\r\n        const newExpenseTransaction= {\r\n            id: Math.floor(Math.random() * 1000),\r\n            expenseDescription,\r\n            expenseAmount: expenseAmount * 1 // Multiply String with \"1\" to convert into number\r\n        }\r\n\r\n    addExpense(newExpenseTransaction);\r\n\r\n    setExpenseAmount(\"\"); // clear input field\r\n    setExpenseDescription(\"\"); // clear input field\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <AddTranscationHeader />\r\n        <div className=\"form-wrapper\">\r\n            <form onSubmit={onSubmitIncome}>\r\n                <div className=\"form-control income\">\r\n                    <label htmlFor=\"amount\">Income Amount</label>\r\n                    <input type=\"number\" value={incomeAmount} onChange = {(event) => setIncomeAmount(event.target.value)} placeholder=\"Enter income...\" />\r\n                    <label htmlFor=\"description\">Description</label>\r\n                    <input type=\"text\" value={incomeDescription} onChange = {(event) => setIncomeDescription(event.target.value)} placeholder=\"Enter description...\" />\r\n                </div>\r\n                <button className=\"button-submit\">Add Income</button>\r\n            </form>\r\n\r\n            <form onSubmit={onSubmitExpense}>\r\n                <div className=\"form-control expense\">\r\n                    <label htmlFor=\"amount\">Expense Amount</label>\r\n                    <input type=\"number\" value={expenseAmount} onChange = {(event) => setExpenseAmount(event.target.value)} placeholder=\"Enter expense...\" />\r\n                    <label htmlFor=\"description\">Description</label>\r\n                    <input type=\"text\" value={expenseDescription} onChange = {(event) => setExpenseDescription(event.target.value)} placeholder=\"Enter description...\" />\r\n                </div>\r\n                <button className=\"button-submit\">Add Expense</button>\r\n            </form>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddTransaction\r\n","import React, {useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\n\r\nconst TransactionHistory = ({\r\n    incomeTransaction, \r\n    expenseTransaction, \r\n    isIncomeState \r\n}) => {\r\n\r\n    const {deleteTransaction}=useContext(GlobalContext);\r\n\r\n        return (\r\n            <div>\r\n                {/* Conditional rendering using ternary operator */}\r\n                {isIncomeState ? <li className=\"income\">\r\n                    {incomeTransaction.incomeDescription ? incomeTransaction.incomeDescription : \"<Empty>\"} <span>${Math.abs(incomeTransaction.incomeAmount)}</span>\r\n                    <button onClick={() => deleteTransaction(incomeTransaction.id)} className=\"delete-item\">x</button>\r\n                </li> \r\n                \r\n                :\r\n                \r\n                <li className=\"expense\">\r\n                    {expenseTransaction.expenseDescription ? expenseTransaction.expenseDescription : \"<Empty>\"} <span>${Math.abs(expenseTransaction.expenseAmount)}</span>\r\n                    <button onClick={() => deleteTransaction(expenseTransaction.id)} className=\"delete-item\">x</button>\r\n                </li>}  \r\n            </div>\r\n        );\r\n\r\n}\r\n\r\nexport default TransactionHistory\r\n","import React from 'react'\r\n\r\nconst IncomeHistoryHeader = () => {\r\n    return (\r\n        <div>\r\n            <h3>Income History</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IncomeHistoryHeader\r\n","import React,{useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\nimport TransactionHistory from './TransactionHistory';\r\nimport IncomeHistoryHeader from './IncomeHistoryHeader';\r\n\r\nconst IncomeHistory = () => {\r\n\r\n    const {incomeTransactions}=useContext(GlobalContext);\r\n\r\n    return (\r\n        <div className=\"transactions-container\">\r\n            <div className=\"transactions-income-container\">\r\n                <IncomeHistoryHeader />\r\n                <ul className=\"transaction-list\">\r\n                    {incomeTransactions.map(incomeTransaction => (\r\n                        <TransactionHistory key={incomeTransaction.id} isIncomeState={true} incomeTransaction={incomeTransaction} />\r\n                    ))} \r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IncomeHistory\r\n","import React from 'react'\r\n\r\nconst ExpenseHistoryHeader = () => {\r\n    return (\r\n        <div>\r\n             <h3>Expense History</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExpenseHistoryHeader\r\n","import React,{useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\nimport TransactionHistory from './TransactionHistory';\r\nimport ExpenseHistoryHeader from './ExpenseHistoryHeader';\r\n\r\nconst ExpenseHistory = () => {\r\n\r\n    const {expenseTransactions}=useContext(GlobalContext);\r\n\r\n    return ( \r\n        <div className=\"transactions-container\">\r\n            <div className=\"transactions-expense-container\">\r\n                <ExpenseHistoryHeader />\r\n                <ul className=\"transaction-list\">\r\n                    {expenseTransactions.map(expenseTransaction => (\r\n                        <TransactionHistory key={expenseTransaction.id}  expenseTransaction={expenseTransaction} />\r\n                    ))} \r\n                </ul>\r\n            </div> \r\n        </div>   \r\n    )\r\n}\r\n\r\nexport default ExpenseHistory\r\n","import React, {useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\n\r\nconst IncomeExpense = () => {\r\n    const {incomeTransactions,expenseTransactions}=useContext(GlobalContext);\r\n\r\n    // fetching all income amount values of each transaction\r\n    const incomeAmounts=incomeTransactions.map(incomeTransaction => incomeTransaction.incomeAmount);\r\n    const totalIncome=incomeAmounts.reduce((accumulator,item) => (accumulator+=item),0).toFixed(2);\r\n\r\n    // fetching all expense amount values of each transaction\r\n    const expenseAmounts=expenseTransactions.map(expenseTransaction => expenseTransaction.expenseAmount);\r\n    const totalExpense=expenseAmounts.reduce((accumulator,item) => (accumulator+=item),0).toFixed(2);\r\n\r\n    return (\r\n        <div className=\"income-expense-container\">\r\n            <div>\r\n                <h4>Income</h4>\r\n                <p className=\"display-income-amount\">${totalIncome}</p>\r\n            </div>\r\n            <div>\r\n                <h4>Expense</h4>\r\n                <p className=\"display-expense-amount\">${totalExpense}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IncomeExpense\r\n","import './App.css';\r\nimport React from 'react';\r\nimport Header from './components/Header';\r\nimport Balance from './components/Balance';\r\nimport AddTransaction from './components/AddTransaction';\r\nimport IncomeHistory from './components/IncomeHistory';\r\nimport ExpenseHistory from './components/ExpenseHistory';\r\nimport {GlobalProvider} from './context/GlobalState';\r\nimport IncomeExpense from './components/IncomeExpense';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <GlobalProvider>\r\n      <Header />\r\n      <div className=\"container\">\r\n          <Balance />\r\n          <IncomeExpense />\r\n          <AddTransaction />\r\n          <IncomeHistory />\r\n          <ExpenseHistory />\r\n      </div>\r\n    </GlobalProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}